<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Box--博客志</title>
  
  <subtitle>wei yang 的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://boxweiyang.github.io/"/>
  <updated>2019-07-02T23:22:09.995Z</updated>
  <id>https://boxweiyang.github.io/</id>
  
  <author>
    <name>Box Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>选址调查-远大中央公园</title>
    <link href="https://boxweiyang.github.io/2019/07/03/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E8%BF%9C%E5%A4%A7%E4%B8%AD%E5%A4%AE%E5%85%AC%E5%9B%AD/"/>
    <id>https://boxweiyang.github.io/2019/07/03/选址调查-远大中央公园/</id>
    <published>2019-07-02T23:08:13.000Z</published>
    <updated>2019-07-02T23:22:09.995Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>周边无早教机构，但是资讯销售说不符合消防</p></blockquote><p><img src="/2019/07/03/选址调查-远大中央公园/1562108834331.png" alt="1562108834331"></p><a id="more"></a><h3 id="远大中央公园"><a href="#远大中央公园" class="headerlink" title="远大中央公园"></a>远大中央公园</h3><blockquote><p>在租商铺为小区底商</p></blockquote><ul><li>交房时间： 2015-12-31</li><li>户数：6979户</li><li>物业费：2.18元</li><li>布局：高层</li><li>开盘价格：83平72万 112平87万</li></ul><h3 id="佳兆业君汇上品"><a href="#佳兆业君汇上品" class="headerlink" title="佳兆业君汇上品"></a>佳兆业君汇上品</h3><blockquote><p>在租商铺对面</p></blockquote><ul><li>交房时间： 2013-12-31</li><li>户数：5926户</li><li>物业费：1.60元</li><li>布局：高层</li><li>开盘价格：83平72万 112平87万</li></ul><h3 id="点击返回总览"><a href="#点击返回总览" class="headerlink" title="点击返回总览)"></a><a href="[https://boxweiyang.github.io/2019/07/01/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E6%80%BB/](https://boxweiyang.github.io/2019/07/01/选址调查-总/">点击返回总览</a>)</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;周边无早教机构，但是资讯销售说不符合消防&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/03/选址调查-远大中央公园/1562108834331.png&quot; alt=&quot;1562108834331&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="早教" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/"/>
    
      <category term="开店准备" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/"/>
    
      <category term="选址" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/%E9%80%89%E5%9D%80/"/>
    
    
      <category term="创业计划" scheme="https://boxweiyang.github.io/tags/%E5%88%9B%E4%B8%9A%E8%AE%A1%E5%88%92/"/>
    
      <category term="早教选址调查" scheme="https://boxweiyang.github.io/tags/%E6%97%A9%E6%95%99%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>选址调查-中德英伦联邦</title>
    <link href="https://boxweiyang.github.io/2019/07/02/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E4%B8%AD%E5%BE%B7%E8%8B%B1%E4%BC%A6%E8%81%94%E9%82%A6/"/>
    <id>https://boxweiyang.github.io/2019/07/02/选址调查-中德英伦联邦/</id>
    <published>2019-07-02T14:44:10.000Z</published>
    <updated>2019-07-02T22:30:20.979Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>只能针对一个小区，大型小区，人口密集，但是可能租户相对多，店铺不能满足消防要求</p></blockquote><p><img src="/2019/07/02/选址调查-中德英伦联邦/1562078688750.png" alt="1562078688750"></p><a id="more"></a><h3 id="1期"><a href="#1期" class="headerlink" title="1期"></a>1期</h3><ul><li>交房时间： 2014-06-30</li><li>户数：3313户</li><li>物业费：2.6元</li><li>布局：高层</li><li>开盘价格：最小44平45万，最大217平202万</li></ul><h3 id="2期"><a href="#2期" class="headerlink" title="2期"></a>2期</h3><ul><li>交房时间： 2014-06-30</li><li>户数：3825户</li><li>物业费：2.8元</li><li>布局：高层</li><li>开盘价格：10000左右一平，当时政策原因都是全款购买</li></ul><h3 id="3期"><a href="#3期" class="headerlink" title="3期"></a>3期</h3><ul><li>交房时间： 2016-06-30</li><li>户数：1632户</li><li>物业费：2.8元</li><li>布局：高层</li><li>开盘价格：10000左右一平 必须全款</li></ul><h3 id="点击返回总览"><a href="#点击返回总览" class="headerlink" title="点击返回总览)"></a><a href="[https://boxweiyang.github.io/2019/07/01/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E6%80%BB/](https://boxweiyang.github.io/2019/07/01/选址调查-总/">点击返回总览</a>)</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;只能针对一个小区，大型小区，人口密集，但是可能租户相对多，店铺不能满足消防要求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/02/选址调查-中德英伦联邦/1562078688750.png&quot; alt=&quot;1562078688750&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="早教" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/"/>
    
      <category term="开店准备" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/"/>
    
      <category term="选址" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/%E9%80%89%E5%9D%80/"/>
    
    
      <category term="创业计划" scheme="https://boxweiyang.github.io/tags/%E5%88%9B%E4%B8%9A%E8%AE%A1%E5%88%92/"/>
    
      <category term="早教选址调查" scheme="https://boxweiyang.github.io/tags/%E6%97%A9%E6%95%99%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>选址调查-艺家class底商</title>
    <link href="https://boxweiyang.github.io/2019/07/02/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E8%89%BA%E5%AE%B6class%E5%BA%95%E5%95%86/"/>
    <id>https://boxweiyang.github.io/2019/07/02/选址调查-艺家class底商/</id>
    <published>2019-07-02T14:19:13.000Z</published>
    <updated>2019-07-02T22:30:38.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自己家小区门口，人流量大，但是周边小区开盘价较低，可能更多的人舍不得花钱上早教，开了一家舞蹈学校  4000一年。</p></blockquote><p><img src="/2019/07/02/选址调查-艺家class底商/1562076966070.png" alt="123"></p><a id="more"></a><h3 id="艺家CLASS"><a href="#艺家CLASS" class="headerlink" title="艺家CLASS"></a>艺家CLASS</h3><blockquote><p>独栋住宅，所选商铺为小区底商，旁边有个永辉超市社区店。现开有茶楼，舞蹈学校，健身房</p></blockquote><p><img src="/2019/07/02/选址调查-艺家class底商/1562077403420.png" alt="1562077403420"></p><ul><li>交房时间： 2017-03-31</li><li>户数：336户</li><li>物业费：2.5元</li><li>布局：联排 叠拼 高层</li><li>开盘价格：78平58万 103平78万</li></ul><h3 id="美城悦荣府"><a href="#美城悦荣府" class="headerlink" title="美城悦荣府"></a>美城悦荣府</h3><blockquote><p>我家小区，现5栋高层 ，别墅，小区小孩多，但没有多少有钱的，可能舍不得花钱</p></blockquote><p><img src="/2019/07/02/选址调查-艺家class底商/1562077622551.png" alt="1562077622551"></p><ul><li>交房时间：2016-04-31</li><li>户数：3264户</li><li>物业费：2.8元</li><li>布局：联排 叠拼 高层</li><li>开盘价格：最贵8500一平，最小户型64平</li></ul><h3 id="家益欣城"><a href="#家益欣城" class="headerlink" title="家益欣城"></a>家益欣城</h3><blockquote><p>较早小区，户型比较大</p></blockquote><p><img src="/2019/07/02/选址调查-艺家class底商/1562077773324.png" alt="1562077773324"></p><ul><li>交房时间：不详</li><li>户数：估计1000人</li><li>物业费：不详</li><li>布局：不详</li><li>开盘价格：不详</li></ul><h3 id="欧香小镇"><a href="#欧香小镇" class="headerlink" title="欧香小镇"></a>欧香小镇</h3><blockquote><p>高档社区，高层叠拼独栋混住</p></blockquote><p><img src="/2019/07/02/选址调查-艺家class底商/1562077880331.png" alt="1562077880331"></p><ul><li>交房时间：2015-06-30</li><li>户数：700户</li><li>物业费：2.6</li><li>布局：不详</li><li>开盘价格：最小户型140平套二 140平209万，202平 250万，13年开盘</li></ul><h3 id="慕和南道"><a href="#慕和南道" class="headerlink" title="慕和南道"></a>慕和南道</h3><blockquote><p>较早小区，楼下底商开有东方爱婴，比较火，有全脑课程</p></blockquote><p><img src="/2019/07/02/选址调查-艺家class底商/1562078107293.png" alt="1562078107293"></p><ul><li>交房时间：2012-06-30</li><li>户数：3800户</li><li>物业费：1.6</li><li>布局：不详</li><li>开盘价格：不详 3000左右</li></ul><h3 id="光明城市"><a href="#光明城市" class="headerlink" title="光明城市"></a>光明城市</h3><blockquote><p>距离较远 很难辐射</p></blockquote><p><img src="/2019/07/02/选址调查-艺家class底商/1562078321305.png" alt="1562078321305"></p><ul><li>交房时间：2015-05</li><li>户数：5000户</li><li>物业费：1.6</li><li>布局：不详</li><li>开盘价格：不详 4000左右</li></ul><h3 id="点击返回总览"><a href="#点击返回总览" class="headerlink" title="点击返回总览)"></a><a href="[https://boxweiyang.github.io/2019/07/01/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E6%80%BB/](https://boxweiyang.github.io/2019/07/01/选址调查-总/">点击返回总览</a>)</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自己家小区门口，人流量大，但是周边小区开盘价较低，可能更多的人舍不得花钱上早教，开了一家舞蹈学校  4000一年。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/02/选址调查-艺家class底商/1562076966070.png&quot; alt=&quot;123&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="早教" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/"/>
    
      <category term="开店准备" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/"/>
    
      <category term="选址" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/%E9%80%89%E5%9D%80/"/>
    
    
      <category term="创业计划" scheme="https://boxweiyang.github.io/tags/%E5%88%9B%E4%B8%9A%E8%AE%A1%E5%88%92/"/>
    
      <category term="早教选址调查" scheme="https://boxweiyang.github.io/tags/%E6%97%A9%E6%95%99%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>选址调查-天府十二幼</title>
    <link href="https://boxweiyang.github.io/2019/07/02/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E5%A4%A9%E5%BA%9C%E5%8D%81%E4%BA%8C%E5%B9%BC/"/>
    <id>https://boxweiyang.github.io/2019/07/02/选址调查-天府十二幼/</id>
    <published>2019-07-02T13:36:09.000Z</published>
    <updated>2019-07-02T22:30:50.190Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>天府十二幼门口铺面，属于高新区，可辐射小区四座，公立幼儿园一所，私立小学一所，所选商铺最大一个面积164平，使用面积140平左右，周围都是餐饮。幼儿园是天府新区的，而周边小区都是高新区的，周边小区不会来这个幼儿园上课</p></blockquote><p><img src="/2019/07/02/选址调查-天府十二幼/1562074887006.png" alt="1562074887006"></p><a id="more"></a><h3 id="保利锦江里"><a href="#保利锦江里" class="headerlink" title="保利锦江里"></a>保利锦江里</h3><blockquote><p>所选商铺为此小区底商</p></blockquote><p><img src="/2019/07/02/选址调查-天府十二幼/1562075890076.png" alt="1562075890076"></p><ul><li>交房时间： 2017-06-30</li><li>户数：1063户</li><li>物业费：2.5元</li><li>布局：联排 叠拼 高层</li><li>开盘价格：<ul><li>高层最大 118平 122万，最小87平72万</li><li>叠拼最大172平 241万，最小141平 229万</li></ul></li></ul><h3 id="美年广场美岸"><a href="#美年广场美岸" class="headerlink" title="美年广场美岸"></a>美年广场美岸</h3><blockquote><p>所选铺面斜对面，老小区，当时价格就不便宜</p></blockquote><p><img src="/2019/07/02/选址调查-天府十二幼/1562076026331.png" alt="1562076026331"></p><ul><li>交房时间：不详</li><li>户数：9栋高层 户数不详  一栋估计300户 共2700户</li><li>物业费：不详</li><li>布局：9栋高层</li><li>开盘价格：不详<ul><li>高层最大 118平 122万，最小87平72万</li><li>叠拼最大172平 241万，最小141平 229万</li></ul></li></ul><h3 id="蜀郡又一城"><a href="#蜀郡又一城" class="headerlink" title="蜀郡又一城"></a>蜀郡又一城</h3><blockquote><p>小型小区，可辐射到</p></blockquote><p><img src="/2019/07/02/选址调查-天府十二幼/1562076253303.png" alt="1562076253303"></p><ul><li>交房时间：2013-06</li><li>户数：1865</li><li>物业费：不详</li><li>布局：高层</li><li>开盘价格：不详</li></ul><h3 id="嘉祥瑞庭南城"><a href="#嘉祥瑞庭南城" class="headerlink" title="嘉祥瑞庭南城"></a>嘉祥瑞庭南城</h3><blockquote><p>隔了一条马路，应该勉强可以辐射到。小区虽然小 但是人口密集，开盘价格比较高</p></blockquote><p><img src="/2019/07/02/选址调查-天府十二幼/1562076476370.png" alt="1562076476370"></p><ul><li>交房时间：2017-08-31</li><li>户数：1832</li><li>物业费：2.5/月</li><li>布局：高层</li><li>开盘价格：97平160万 71平91万 96平155万</li></ul><h3 id="点击返回总览"><a href="#点击返回总览" class="headerlink" title="点击返回总览)"></a><a href="[https://boxweiyang.github.io/2019/07/01/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E6%80%BB/](https://boxweiyang.github.io/2019/07/01/选址调查-总/">点击返回总览</a>)</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;天府十二幼门口铺面，属于高新区，可辐射小区四座，公立幼儿园一所，私立小学一所，所选商铺最大一个面积164平，使用面积140平左右，周围都是餐饮。幼儿园是天府新区的，而周边小区都是高新区的，周边小区不会来这个幼儿园上课&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/02/选址调查-天府十二幼/1562074887006.png&quot; alt=&quot;1562074887006&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="早教" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/"/>
    
      <category term="开店准备" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/"/>
    
      <category term="选址" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/%E9%80%89%E5%9D%80/"/>
    
    
      <category term="创业计划" scheme="https://boxweiyang.github.io/tags/%E5%88%9B%E4%B8%9A%E8%AE%A1%E5%88%92/"/>
    
      <category term="早教选址调查" scheme="https://boxweiyang.github.io/tags/%E6%97%A9%E6%95%99%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>选址调查-总</title>
    <link href="https://boxweiyang.github.io/2019/07/01/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E6%80%BB/"/>
    <id>https://boxweiyang.github.io/2019/07/01/选址调查-总/</id>
    <published>2019-07-01T06:41:55.000Z</published>
    <updated>2019-07-02T23:22:52.423Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>共有意向位置11处，最终位置尚未确定</p></blockquote><a id="more"></a><h3 id="合能璞丽"><a href="#合能璞丽" class="headerlink" title="合能璞丽"></a>合能璞丽</h3><blockquote><p>下沉式社区底商，无地下停车场，对面公立小学幼儿园，周边早教1所</p></blockquote><p><img src="/2019/07/01/选址调查-总/1561962033676.png" alt="1561962033676"></p><ul><li><p>位置： 高新区天府四街，教科院实验小学对面</p></li><li><p>紧贴人口：2294户</p></li><li><p>辐射人口：5467户，其中1159户为今年交房</p></li><li><p>学校人口：小学 1800学生，幼儿园300人内</p></li><li><p>大概租金</p><ul><li>面向小学幼儿园 80-90元/平方</li><li>面向小区一侧 70-80元/平方</li></ul></li><li><p><a href="[https://boxweiyang.github.io/2019/07/01/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E5%90%88%E8%83%BD%E7%92%9E%E4%B8%BD/](https://boxweiyang.github.io/2019/07/01/选址调查-合能璞丽/">点击跳转至详请</a>)</p></li><li><p>结论</p><blockquote><p>待编辑</p></blockquote></li></ul><h3 id="天府十二幼门口"><a href="#天府十二幼门口" class="headerlink" title="天府十二幼门口"></a>天府十二幼门口</h3><blockquote><p>在租商铺二楼最大面积164平  使用面积140平，餐饮居多。旁边是公立幼儿园，私立小学</p></blockquote><p><img src="/2019/07/01/选址调查-总/1562074887006.png" alt="1561962033676"></p><ul><li><p>位置：高新区锦江旁，保利锦江里底商</p></li><li><p>紧贴人口：3763户</p></li><li><p>辐射人口：3697户</p></li><li><p>学校人口：幼儿园300人左右</p></li><li><p>大概租金：100元/平方</p></li><li><p><a href="[https://boxweiyang.github.io/2019/07/02/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E5%A4%A9%E5%BA%9C%E5%8D%81%E4%BA%8C%E5%B9%BC/](https://boxweiyang.github.io/2019/07/02/选址调查-天府十二幼/">点击跳转至详请</a>)</p></li><li><p>结论</p><blockquote><p>待编辑</p></blockquote></li></ul><h3 id="艺家class"><a href="#艺家class" class="headerlink" title="艺家class"></a>艺家class</h3><blockquote><p>家门口，二楼商铺在租，90一平，一侧500平 一侧600平，环境最熟悉，辐射人口多，消费能力一般，新建幼儿园一所公立，不知道能不能谈下来租小一些，便宜点儿。紧贴两个小区，辐射4个小区</p></blockquote><p><img src="/2019/07/01/选址调查-总/1562076966070.png" alt="1562076966070"></p><ul><li><p>紧贴人口：4600户</p></li><li><p>辐射人口：9500户</p></li><li><p>学校人口：在建</p></li><li><p>大概租金：90元/平方</p></li><li><p><a href="[https://boxweiyang.github.io/2019/07/02/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E8%89%BA%E5%AE%B6class%E5%BA%95%E5%95%86/](https://boxweiyang.github.io/2019/07/02/选址调查-艺家class底商/">点击跳转至详请</a>)</p></li><li><p>结论</p><blockquote><p>待编辑</p></blockquote></li></ul><h3 id="益州大道中医馆转让"><a href="#益州大道中医馆转让" class="headerlink" title="益州大道中医馆转让"></a>益州大道中医馆转让</h3><blockquote><p>高新区，小学对面，300平中医馆转让，转角位置，旁边有一家全脑机构</p></blockquote><ul><li>紧贴人口：</li><li>辐射人口：</li><li>学校人口：</li><li>大概租金：100元/平方</li><li>结论：</li></ul><h3 id="远大中央公园"><a href="#远大中央公园" class="headerlink" title="远大中央公园"></a>远大中央公园</h3><blockquote><p>周围人口多，无早教，5分钟路程有小学 幼儿园。问过售楼部，不符合消防要求。但是咨询过第三方机构不需要办学许可证</p><p><a href="https://cd.58.com/shangpu/38609448619277x.shtml?utm_source=market&amp;spm=u-2d2yxv86y3v43nkddh1.BDPCPZ_BT" target="_blank" rel="noopener">商铺信息</a></p></blockquote><p><img src="/2019/07/01/选址调查-总/1562108834331.png" alt="1562108834331"></p><ul><li>紧贴人口：12000户</li><li>辐射人口：0</li><li>学校人口：小学 幼儿园公立</li><li>大概租金：411平 2.7万/月</li><li>结论：</li></ul><h3 id="黄金时代"><a href="#黄金时代" class="headerlink" title="黄金时代"></a>黄金时代</h3><blockquote><p>有两个人口密集小区，主干道对侧有小区不好辐射，除了两个小区其它都是安置小区没有消费能力。</p></blockquote><ul><li>紧贴人口：</li><li>辐射人口：</li><li>学校人口：</li><li>大概租金：400平 2.47万/月</li><li>结论：</li></ul><h3 id="中德英伦联邦"><a href="#中德英伦联邦" class="headerlink" title="中德英伦联邦"></a>中德英伦联邦</h3><blockquote><p>小区人口密集，缺点只能针对一个小区，不符合消防标准，有一家小型乐高班</p></blockquote><p><img src="/2019/07/01/选址调查-总/1562078688750.png" alt="1562076966070"></p><ul><li>紧贴人口：8761户</li><li>辐射人口：都是安置小区</li><li>学校人口：无</li><li>大概租金：100一平大概</li><li>结论：</li></ul><h3 id="中海右岸"><a href="#中海右岸" class="headerlink" title="中海右岸"></a>中海右岸</h3><blockquote><p>属于双流区，周边4个大型小区，培训机构早教多</p></blockquote><ul><li>紧贴人口：</li><li>辐射人口：</li><li>学校人口：</li><li>大概租金：400平 2.7万/月</li><li>结论：</li></ul><h3 id="水育馆转让"><a href="#水育馆转让" class="headerlink" title="水育馆转让"></a>水育馆转让</h3><blockquote><p>中海右岸附近，四个小区交界处，三楼，旁边有个运动宝贝</p><p><a href="https://cd.58.com/shangpu/38609448619277x.shtml?utm_source=market&amp;spm=u-2d2yxv86y3v43nkddh1.BDPCPZ_BT" target="_blank" rel="noopener">商铺信息</a></p></blockquote><ul><li>紧贴人口：</li><li>辐射人口：</li><li>学校人口：</li><li>大概租金：360平 2.7万/月</li><li>结论：</li></ul><h3 id="南湖国际社区"><a href="#南湖国际社区" class="headerlink" title="南湖国际社区"></a>南湖国际社区</h3><blockquote><p>小区密集，在租位置有点儿偏，有多家早教机构。</p><p><a href="https://cd.58.com/shangpu/37593501821958x.shtml?utm_source=market&amp;spm=u-2d2yxv86y3v43nkddh1.BDPCPZ_BT" target="_blank" rel="noopener">商铺信息</a></p></blockquote><ul><li>紧贴人口：</li><li>辐射人口：</li><li>学校人口：</li><li>大概租金：411平 2.47万/月</li><li>结论：</li></ul><h3 id="华阳老城区"><a href="#华阳老城区" class="headerlink" title="华阳老城区"></a>华阳老城区</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;共有意向位置11处，最终位置尚未确定&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="早教" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/"/>
    
      <category term="开店准备" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/"/>
    
      <category term="选址" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/%E9%80%89%E5%9D%80/"/>
    
    
      <category term="创业计划" scheme="https://boxweiyang.github.io/tags/%E5%88%9B%E4%B8%9A%E8%AE%A1%E5%88%92/"/>
    
      <category term="早教选址调查" scheme="https://boxweiyang.github.io/tags/%E6%97%A9%E6%95%99%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>选址调查-合能璞丽</title>
    <link href="https://boxweiyang.github.io/2019/07/01/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E5%90%88%E8%83%BD%E7%92%9E%E4%B8%BD/"/>
    <id>https://boxweiyang.github.io/2019/07/01/选址调查-合能璞丽/</id>
    <published>2019-07-01T06:11:05.000Z</published>
    <updated>2019-07-02T22:32:34.249Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>合能璞丽门前社区底商，-1,1楼为餐饮，2-3层目前有培训机构及餐饮外卖在做，空铺较多。</p></blockquote><p><img src="/2019/07/01/选址调查-合能璞丽/1561962033676.png" alt="1561962033676"></p><a id="more"></a><h3 id="合能璞丽"><a href="#合能璞丽" class="headerlink" title="合能璞丽"></a>合能璞丽</h3><blockquote><p>目标商铺在该小区底商位置</p></blockquote><p><img src="/2019/07/01/选址调查-合能璞丽/1561732307832.png" alt="1561732307832"></p><ul><li><p>交房时间： 2016-09-30</p></li><li><p>户数：1080户</p></li><li><p>物业费：2.8元</p></li><li><p>布局：3栋小户型高层，3栋洋房</p></li><li><p>开盘价格：</p><ul><li>高层最大 89平 81万，最小64平60万</li><li>洋房最大 151平 350万，最小105平 142万</li></ul></li></ul><h3 id="建发翡翠鹭洲"><a href="#建发翡翠鹭洲" class="headerlink" title="建发翡翠鹭洲"></a>建发翡翠鹭洲</h3><blockquote><p>目标商铺对面，隔小路</p></blockquote><p><img src="/2019/07/01/选址调查-合能璞丽/1561732349843.png" alt="1561732349843"></p><ul><li>交房时间：2016-12-30</li><li>户数：1214户</li><li>物业费：3元</li><li>布局：2栋高层 4排别墅</li><li>开盘价格：<ul><li>高层最大138平 155万，最小 78平 100万</li><li>别墅均价  149平 400万</li></ul></li></ul><h3 id="大源欢乐颂"><a href="#大源欢乐颂" class="headerlink" title="大源欢乐颂"></a>大源欢乐颂</h3><blockquote><p>目标商铺后身，仅有住宅3.4户，且才交房不久</p></blockquote><p><img src="/2019/07/01/选址调查-合能璞丽/1561732407706.png" alt="1561732407706"></p><ul><li>交房时间：2018-12-31</li><li>户数： 住宅304户，其它为公寓</li><li>物业费：2.8元</li><li>布局：独栋超高层住宅</li><li>开盘价格：<ul><li>104平 140万</li><li>73平 101万</li></ul></li></ul><h3 id="北辰香麓"><a href="#北辰香麓" class="headerlink" title="北辰香麓"></a>北辰香麓</h3><blockquote><p>一期2018-12-31日才交房，二期2019-6-30交房</p></blockquote><p><img src="/2019/07/01/选址调查-合能璞丽/1561732590487.png" alt="1561732590487"></p><ul><li>一期<ul><li>交房时间：2018-12-31</li><li>户数： 住宅723户</li><li>物业费：4元</li><li>布局：高层，叠拼</li><li>开盘价格：<ul><li>高层最小106平142万，最大137平195万</li><li>叠拼均价144平 500万</li></ul></li></ul></li><li>二期<ul><li>交房时间：2019-6-30</li><li>户数：住宅132户</li><li>物业费：4元</li><li>布局：叠拼</li><li>开盘价格：<ul><li>叠拼均价146平 440万</li></ul></li></ul></li></ul><h3 id="朗基御今园"><a href="#朗基御今园" class="headerlink" title="朗基御今园"></a>朗基御今园</h3><blockquote></blockquote><p><img src="/2019/07/01/选址调查-合能璞丽/1561732867354.png" alt="1561732867354"></p><ul><li>交房时间：2018-05-31</li><li>户数： 住宅1408户</li><li>物业费：3元</li><li>布局：住宅、叠拼</li><li>开盘价格：<ul><li>高层最小96平155万，最大132平264万</li><li>叠拼均价144平600万</li></ul></li></ul><h3 id="保利心语花园"><a href="#保利心语花园" class="headerlink" title="保利心语花园"></a>保利心语花园</h3><p><img src="/2019/07/01/选址调查-合能璞丽/1561733150241.png" alt="1561733150241"></p><p>共2900户，入驻时间分三期11-13年入驻，开盘价格不详，现价格2.5W+一平，开盘价应该不贵8000左右</p><h3 id="点击返回总览"><a href="#点击返回总览" class="headerlink" title="点击返回总览)"></a><a href="[https://boxweiyang.github.io/2019/07/01/%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5-%E6%80%BB/](https://boxweiyang.github.io/2019/07/01/选址调查-总/">点击返回总览</a>)</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;合能璞丽门前社区底商，-1,1楼为餐饮，2-3层目前有培训机构及餐饮外卖在做，空铺较多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/01/选址调查-合能璞丽/1561962033676.png&quot; alt=&quot;1561962033676&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="早教" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/"/>
    
      <category term="开店准备" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/"/>
    
      <category term="选址" scheme="https://boxweiyang.github.io/categories/%E6%97%A9%E6%95%99/%E5%BC%80%E5%BA%97%E5%87%86%E5%A4%87/%E9%80%89%E5%9D%80/"/>
    
    
      <category term="创业计划" scheme="https://boxweiyang.github.io/tags/%E5%88%9B%E4%B8%9A%E8%AE%A1%E5%88%92/"/>
    
      <category term="早教选址调查" scheme="https://boxweiyang.github.io/tags/%E6%97%A9%E6%95%99%E9%80%89%E5%9D%80%E8%B0%83%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>常见设计模式-建造者模式</title>
    <link href="https://boxweiyang.github.io/2019/04/26/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://boxweiyang.github.io/2019/04/26/常见设计模式-建造者模式/</id>
    <published>2019-04-26T07:48:05.000Z</published>
    <updated>2019-05-09T01:47:55.861Z</updated>
    
    <content type="html"><![CDATA[<p><strong>建造者模式</strong>的定义，将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。一个完整的建造者模式通常包括了<strong>用户</strong>(发布需求)，<strong>指挥者</strong>(只会建造者建造)，<strong>建造者</strong>(执行人)三个角色。</p><p>这种模式主要用在，在需求中有一个复杂的对象，这个对象有这样的特征</p><ul><li>对象有多个子部分，每部分由不同的算法来实现</li><li>这些子部分经常面临着变化</li><li>而同时，整个对象将子部分组合在一起的逻辑又基本稳定</li></ul><blockquote><p>接之前的例子，电脑商组装一台电脑，需要将CPU、硬盘、电源等模块组装在一起。电脑商当然不会自己做这个事情，而是雇佣了两名员工(建造者)来做，电脑商只要找一个指挥者指挥他们完成任务即可。</p></blockquote><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>之前几个简单的设计模式笔者都是直接贴的代码，从这篇开始我们尝试着，按照逻辑架起这些设计模式</p><h3 id="电脑类"><a href="#电脑类" class="headerlink" title="电脑类"></a>电脑类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;<span class="built_in">string</span>&gt; ComputerPart = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="built_in">string</span> part)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    ComputerPart.Add(part);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    ComputerPart.ForEach(item =&gt; &#123;</span><br><span class="line">      Console.WriteLine(<span class="string">"组装"</span> + item);</span><br><span class="line">    &#125;);</span><br><span class="line">    Console.WriteLine(<span class="string">"完成组装"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象的建造者"><a href="#抽象的建造者" class="headerlink" title="抽象的建造者"></a>抽象的建造者</h3><p>作为组装电脑的员工，必然要会组装CPU、电源等零部件并交付完整的电脑出来</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuildCpu</span>(<span class="params"></span>)</span>;    <span class="comment">//组装CPU</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuildPower</span>(<span class="params"></span>)</span>;<span class="comment">//组装电源</span></span><br><span class="line">  <span class="comment">// ......组装其它配件</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">GetComputer</span>(<span class="params"></span>)</span>; <span class="comment">//交付电脑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现建造者"><a href="#实现建造者" class="headerlink" title="实现建造者"></a>实现建造者</h3><p>两名组装员工的岗位，一个负责组装台式机，一个负责组装笔记本</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//负责组装台式机的员工</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DesktopBuilder</span> : <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> MyComputer = <span class="keyword">new</span> Computer()</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildCpu</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyComputer.Build(<span class="string">"台式机CPU"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildPower</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyComputer.Build(<span class="string">"台式机电源"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Computer <span class="title">GetComputer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> MyComputer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//负责组装笔记本的员工</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LaptopBuilder</span> : <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> MyComputer = <span class="keyword">new</span> Computer()</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildCpu</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyComputer.Build(<span class="string">"笔记本CPU"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildPower</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyComputer.Build(<span class="string">"笔记本电源"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Computer <span class="title">GetComputer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> MyComputer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建指挥者"><a href="#创建指挥者" class="headerlink" title="创建指挥者"></a>创建指挥者</h3><p>建造者找好了并培训了技能，接下来就需要指挥者来监督指挥工作了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ToWork</span><span class="params">(Builder builder)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    builder.BuildCpu();</span><br><span class="line">    builder.BuildPower();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户调用"><a href="#用户调用" class="headerlink" title="用户调用"></a>用户调用</h3><p>指挥者和建造者都有了，电脑商就可以运作起来了</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Main()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> leader = <span class="keyword">new</span> <span class="type">Leader</span>();<span class="comment">//委任指挥者</span></span><br><span class="line">    <span class="keyword">var</span> desktopBuilder = <span class="keyword">new</span> <span class="type">DesktopBuilder</span>();<span class="comment">//委任台式机组装人员</span></span><br><span class="line">    <span class="keyword">var</span> taplopBuilder = <span class="keyword">new</span> <span class="type">TaplopBuilder</span>();<span class="comment">//委任笔记本组装人员</span></span><br><span class="line">    </span><br><span class="line">    leader.ToWork(desktopBuilder);<span class="comment">//指挥者让台式机组装人员工作</span></span><br><span class="line">    desktopBuilder.GetComputer().Show();<span class="comment">//台式机组装人员交付台式机</span></span><br><span class="line">    </span><br><span class="line">    leader.ToWork(taplopBuilder);<span class="comment">//指挥者让笔记本组装人员工作</span></span><br><span class="line">    taplpgBuilder.GetComputer().Show();<span class="comment">//笔记本组装人员交付笔记本</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="电脑商出台了一款新的组装电脑-台式机PRO"><a href="#电脑商出台了一款新的组装电脑-台式机PRO" class="headerlink" title="电脑商出台了一款新的组装电脑-台式机PRO"></a>电脑商出台了一款新的组装电脑-台式机PRO</h2><p>不难看出，只需要招聘一个台式机PRO的组装人员就可以了，因为装机顺序是不会变的，变的只有零部件的配置。</p><p>这就是建造者模式了。建造者只负责学会各种技能，而指挥者负责指挥建造者按照技能顺序，完成产品生产。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;建造者模式&lt;/strong&gt;的定义，将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。一个完整的建造者模式通常包括了&lt;strong&gt;用户&lt;/strong&gt;(发布需求)，&lt;strong&gt;指挥者&lt;/strong&gt;(只会建造者建造)，&lt;strong&gt;建造者&lt;/strong&gt;(执行人)三个角色。&lt;/p&gt;
&lt;p&gt;这种模式主要用在，在需求中有一个复杂的对象，这个对象有这样的特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象有多个子部分，每部分由不同的算法来实现&lt;/li&gt;
&lt;li&gt;这些子部分经常面临着变化&lt;/li&gt;
&lt;li&gt;而同时，整个对象将子部分组合在一起的逻辑又基本稳定&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;接之前的例子，电脑商组装一台电脑，需要将CPU、硬盘、电源等模块组装在一起。电脑商当然不会自己做这个事情，而是雇佣了两名员工(建造者)来做，电脑商只要找一个指挥者指挥他们完成任务即可。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="dotnet" scheme="https://boxweiyang.github.io/categories/dotnet/"/>
    
      <category term="设计模式" scheme="https://boxweiyang.github.io/categories/dotnet/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="dotnet" scheme="https://boxweiyang.github.io/tags/dotnet/"/>
    
      <category term="架构" scheme="https://boxweiyang.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计模式" scheme="https://boxweiyang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>常见设计模式(四)-抽象工厂</title>
    <link href="https://boxweiyang.github.io/2019/04/25/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/"/>
    <id>https://boxweiyang.github.io/2019/04/25/常见设计模式-抽象工厂/</id>
    <published>2019-04-25T08:56:43.000Z</published>
    <updated>2019-05-09T01:48:10.608Z</updated>
    
    <content type="html"><![CDATA[<p>抽象工厂，其实就是将简单工厂的工厂类变成抽象类，并且在子类中完成各自的产品实现。</p><p>抽象工厂和工厂方法模式的区别，就在于，工厂方法只实现了一种产品的生产，而抽象工厂面向的是一个产品簇，实现了多中产品的生产。</p><blockquote><p><span style="color:red"><strong>所以</strong></span>，请忘记工厂方法！抽象工厂就是工厂方法，工厂方法其实只是实现了单一产品的抽象工厂</p></blockquote><p>下面笔者会直接根据之前的例子，展示抽象工厂的代码</p><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>之前的例子，增加了需求，每个电脑商要生产不同类型的电脑，包括台式机、平板电脑、笔记本电脑。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公司作为用户方</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Company</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> dell = <span class="keyword">new</span> BuyDell();</span><br><span class="line">    <span class="keyword">var</span> mac = <span class="keyword">new</span> BuyMac();</span><br><span class="line">    </span><br><span class="line">    dell.BuyDesktop().Buy();</span><br><span class="line">    dell.BuyLaptop().Buy();</span><br><span class="line">    mac.BuyDesktop().Buy();</span><br><span class="line">    mac.BuyLaptop().Buy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是服务商部分************************************</span></span><br><span class="line"><span class="comment">//服务商的抽象类,以产品为抽象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Desktop <span class="title">BuyDesktop</span>(<span class="params"></span>)</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> Laptop BuyLaptop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务商实现购买dell品牌的电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BuyDell</span> : <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//买台式机</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Desktop <span class="title">BuyDesktop</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DellDesktop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//买笔记本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Laptop <span class="title">BuyLaptop</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DellLaptop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务商实现购买苹果电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BuyMac</span> : <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Desktop <span class="title">BuyDesktop</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DellDesktop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Laptop <span class="title">BuyLaptop</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DellLaptop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是电脑商部分************************************</span></span><br><span class="line"><span class="comment">//产品抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Desktop</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Buy</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Laptop</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Buy</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//戴尔电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DellDesktop</span> : <span class="title">Desktop</span>   <span class="comment">//台式机装机流程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="title">Buy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Console.WriteLine(<span class="string">"一台DELL台式电脑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DellLaptop</span> : <span class="title">Laptop</span><span class="comment">//笔记本装机流程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="title">Buy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Console.WriteLine(<span class="string">"一台DELL笔记本电脑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//苹果电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MacDesktop</span> : <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="title">Buy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Console.WriteLine(<span class="string">"一台MAC台式电脑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MacDesktop</span> : <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="title">Buy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Console.WriteLine(<span class="string">"一台Mac Book"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以简单工厂开始入门，工厂方法打好了抽象的基础，形成了一种彻底的工厂类模式<strong>抽象工厂</strong>模式。</p><p>在抽象工厂模式下，增加一个电脑商，只需要添加对应的实体类即可，尽可能的达到了解耦和封装变化的目的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抽象工厂，其实就是将简单工厂的工厂类变成抽象类，并且在子类中完成各自的产品实现。&lt;/p&gt;
&lt;p&gt;抽象工厂和工厂方法模式的区别，就在于，工厂方法只实现了一种产品的生产，而抽象工厂面向的是一个产品簇，实现了多中产品的生产。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;&lt;strong&gt;所以&lt;/strong&gt;&lt;/span&gt;，请忘记工厂方法！抽象工厂就是工厂方法，工厂方法其实只是实现了单一产品的抽象工厂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面笔者会直接根据之前的例子，展示抽象工厂的代码&lt;/p&gt;
    
    </summary>
    
      <category term="dotnet" scheme="https://boxweiyang.github.io/categories/dotnet/"/>
    
      <category term="设计模式" scheme="https://boxweiyang.github.io/categories/dotnet/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="dotnet" scheme="https://boxweiyang.github.io/tags/dotnet/"/>
    
      <category term="架构" scheme="https://boxweiyang.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计模式" scheme="https://boxweiyang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>常见设计模式(三)-工厂方法</title>
    <link href="https://boxweiyang.github.io/2019/04/25/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    <id>https://boxweiyang.github.io/2019/04/25/常见设计模式-工厂方法/</id>
    <published>2019-04-25T05:41:11.000Z</published>
    <updated>2019-05-09T01:42:07.591Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客已经举例说明了简单工厂模式，细心的读者应该可以看到，它有一些明显的缺陷：</p><blockquote><ul><li>随着添加的电脑商越来越多，工厂类中会不断的添加 <code>else if</code> 或者 <code>case</code> 来确保生成对应的实体类；</li><li>随之而来的，我们可能需要一个<strong>实体类</strong>或<strong>结构体</strong>等来为用户创建一个菜单，以引导他们能顺利的得到实体类(字符串参数必须完全正确)；</li><li>当电脑商不断增加的时候，我们也必须要不停的对工厂类进行改动，他们之间仍然有很紧的耦合</li></ul></blockquote><a id="more"></a><h2 id="为什么有工厂方法模式"><a href="#为什么有工厂方法模式" class="headerlink" title="为什么有工厂方法模式"></a>为什么有工厂方法模式</h2><p>我们要想一个办法，不需要再改动工厂类逻辑的情况下添加新的电脑商，而服务商也不需要做那么些的判断来帮助用户购买电脑。工厂方法模式就出现了。</p><p>##具体实现</p><p>我们把工厂类中对应的每个电脑商的部分，封装出来变成子类，这样用户可以直接调用对应的子类来完成电脑的采购。这就是工厂方法。我们把之前简单工厂的例子改动一下</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公司作为用户方12</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Company</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> dell = <span class="keyword">new</span> BuyDell();</span><br><span class="line">    <span class="keyword">var</span> mac = <span class="keyword">new</span> BuyMac();</span><br><span class="line">    </span><br><span class="line">    dell.BuyComputer().Buy();</span><br><span class="line">    mac.BuyComputer().Buy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是服务商部分************************************</span></span><br><span class="line"><span class="comment">//服务商的抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FactoryCreator</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">BuyComputer</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务商实现购买dell电脑</span></span><br><span class="line"><span class="keyword">public</span> Computer BuyDell : FactoryCreator</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Computer <span class="title">BuyComputer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//坐公交车去买电脑</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Dell();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务商实现购买苹果电脑</span></span><br><span class="line"><span class="keyword">public</span> Computer BuyMac : FactoryCreator</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Computer <span class="title">BuyComputer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//打开官网订购</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Mac();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是电脑商部分************************************</span></span><br><span class="line"><span class="comment">//电脑抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Buy</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//戴尔电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dell</span> : <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="title">Buy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//这里是一台dell电脑的攒机工作流。。。</span></span><br><span class="line"> Console.WriteLine(<span class="string">"一台DELL电脑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//苹果电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Mac</span> : <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="title">Buy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//这里是一台苹果电脑的生产过程</span></span><br><span class="line">Console.WriteLine(<span class="string">"一台苹果电脑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博客已经举例说明了简单工厂模式，细心的读者应该可以看到，它有一些明显的缺陷：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;随着添加的电脑商越来越多，工厂类中会不断的添加 &lt;code&gt;else if&lt;/code&gt; 或者 &lt;code&gt;case&lt;/code&gt; 来确保生成对应的实体类；&lt;/li&gt;
&lt;li&gt;随之而来的，我们可能需要一个&lt;strong&gt;实体类&lt;/strong&gt;或&lt;strong&gt;结构体&lt;/strong&gt;等来为用户创建一个菜单，以引导他们能顺利的得到实体类(字符串参数必须完全正确)；&lt;/li&gt;
&lt;li&gt;当电脑商不断增加的时候，我们也必须要不停的对工厂类进行改动，他们之间仍然有很紧的耦合&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="dotnet" scheme="https://boxweiyang.github.io/categories/dotnet/"/>
    
      <category term="设计模式" scheme="https://boxweiyang.github.io/categories/dotnet/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="dotnet" scheme="https://boxweiyang.github.io/tags/dotnet/"/>
    
      <category term="架构" scheme="https://boxweiyang.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计模式" scheme="https://boxweiyang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>常见设计模式(二)-简单工厂</title>
    <link href="https://boxweiyang.github.io/2019/04/24/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/"/>
    <id>https://boxweiyang.github.io/2019/04/24/常见设计模式(二)-简单工厂/</id>
    <published>2019-04-24T07:27:00.000Z</published>
    <updated>2019-05-09T01:48:32.993Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简单工厂</strong>是一种可以根据不同参数产生不同实例的处理方式，感觉本质来说不能算是设计模式，而应该是一种编程习惯。 工厂就是帮助我们处理流程的地方，比如组装汽车、制造磨具、包装等。</p><p>从编程的角度，就涉及到一个面向对象的重要思想<span style="color:red"><strong>封装变化</strong></span>，一方面用户没有必要了解变化的内部，只需要告诉工厂他需要什么；另一方面，封装变化是最简单的解耦方式，业务逻辑的改变不会需要调用方去改变。</p><a id="more"></a><blockquote><p>我们这里举个 <code>公司给员工置办电脑</code>的例子来说明。</p><p>当我们需要组装电脑时，我们需要购买CPU、内存条、硬盘等一系列的东西，然后把它们组装起来装上系统，对于用户来说，这是一件很麻烦的事情。</p><p>这时我们有了品牌电脑商，他们可以直接按照我们的需求给我们一台完整的电脑，他们帮我们<strong>封装了变化</strong>，以后我们就可以买什么牌子的电脑就去找对应的电脑商。但是我们仍然需要按照我们的列表跑一家一家的电脑商来购置对应的电脑。</p><p>这时，我们有了服务商，我们只要把需求告诉他们，他们会帮我们去对应的地方购置并交付给我们，那么我们享有一台什么样的电脑，不需要关注这个过程，我们得到了有一台对应的电脑的结果。<code>这就是简单工厂</code>。</p></blockquote><h2 id="没有工厂"><a href="#没有工厂" class="headerlink" title="没有工厂"></a>没有工厂</h2><p>公司给员工置办电脑，首先需要罗列自己的需求，然后按需求去对应的商家购买。这段代码实现了<strong>封装变化</strong>。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公司作为用户方</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Company</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    BuyComputer(<span class="string">"DELL"</span>);</span><br><span class="line">    BuyComputer(<span class="string">"Mac"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//公司的采购行为</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">private</span> Computer <span class="title">BuyComputer</span>(<span class="params"><span class="keyword">string</span> type</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Computer computer = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span>(type == <span class="string">"DELL"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    computer = <span class="keyword">new</span> Dell();  <span class="comment">//如果买Dell电脑，去找Dell商家</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="string">"Mac"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      computer = <span class="keyword">new</span> Mac();<span class="comment">//如果买Mac电脑，去找Mac商家</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> computer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Buy</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//戴尔电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dell</span> : <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="title">Buy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//这里是一台dell电脑的攒机工作流。。。</span></span><br><span class="line"> Console.WriteLine(<span class="string">"一台DELL电脑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//苹果电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Mac</span> : <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="title">Buy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//这里是一台苹果电脑的生产过程</span></span><br><span class="line">Console.WriteLine(<span class="string">"一台苹果电脑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码，实现了<strong>封装变化</strong>，将电脑组装的行为，交给了商家，公司不需要考虑该如去组装一台电脑，而整个组装流程及优化都交给了电脑商。</p><h2 id="加入工厂类"><a href="#加入工厂类" class="headerlink" title="加入工厂类"></a>加入工厂类</h2><p>公司突然发现，他不止可以把组装的流程交给电脑商，还有服务商可以直接帮他们采购电脑，他们甚至可以不去管采购的流程。服务商加入了进来，它被称为<strong>工厂类</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公司作为用户方</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Company</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    ComputerFactory.BuyComputer(<span class="string">"DELL"</span>);</span><br><span class="line">    ComputerFactory.BuyComputer(<span class="string">"Mac"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务商，帮助公司采购电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerFactory</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//公司的采购行为全权交给了服务商处理</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Computer <span class="title">BuyComputer</span>(<span class="params"><span class="keyword">string</span> type</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Computer computer = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span>(type == <span class="string">"DELL"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    computer = <span class="keyword">new</span> Dell();  <span class="comment">//如果买Dell电脑，服务商去找Dell商家</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="string">"Mac"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      computer = <span class="keyword">new</span> Mac();<span class="comment">//如果买Mac电脑，服务商去找Mac商家</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//把电脑拿给公司</span></span><br><span class="line">    <span class="keyword">return</span> computer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Buy</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//戴尔电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dell</span> : <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="title">Buy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//这里是一台dell电脑的攒机工作流。。。</span></span><br><span class="line"> Console.WriteLine(<span class="string">"一台DELL电脑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//苹果电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Mac</span> : <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="title">Buy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//这里是一台苹果电脑的生产过程</span></span><br><span class="line">Console.WriteLine(<span class="string">"一台苹果电脑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>观察上面两段代码，第一段将电脑组装流程交给了电脑商，公司再也不需要关注电脑是如何攒配的了，及时随着技术的进步电脑的硬件发生了改变等，也不会影响到公司的需求 <code>购买指定的电脑</code>，公司也不需要再次去学习如何组装电脑。实现了<strong>封装变化</strong>，并进行了<strong>解耦</strong>；</p><p>第二段代码，公司将去电脑商采购电脑这部分业务交给了服务商，公司也不需要关注该去哪里采购电脑，电脑商的采购流程是否有变化了。最后，公司只要想买电脑，联系服务商就获取了电脑。进一步的<strong>封装变化</strong>与<strong>解耦</strong>。</p><blockquote><p>为什么说，简单工厂其实是一种面向对象的编程习惯。 我们编程过程就是一个极尽去封装变化和解耦的过程，可以看出，即使不实用简单工厂模式，我们上面的代码依然封装了变化，但是却有参与变化留给了用户。而加入了简单工程，我们基本完成了与用户的的彻底解耦，其实这个主要来源于日常变成过程中的惯性思维。</p><p>电脑商封装了攒机过程的变化，使服务商与攒机过程解耦；</p><p>服务商封装了电脑采购的变化，形成了工厂模式，使作为用户的公司与整个电脑购买流程解耦；</p><p>而实现这个工厂模式的，其实就是一个工厂类，一个可以根据入参不同产生不同实例的方法；</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;简单工厂&lt;/strong&gt;是一种可以根据不同参数产生不同实例的处理方式，感觉本质来说不能算是设计模式，而应该是一种编程习惯。 工厂就是帮助我们处理流程的地方，比如组装汽车、制造磨具、包装等。&lt;/p&gt;
&lt;p&gt;从编程的角度，就涉及到一个面向对象的重要思想&lt;span style=&quot;color:red&quot;&gt;&lt;strong&gt;封装变化&lt;/strong&gt;&lt;/span&gt;，一方面用户没有必要了解变化的内部，只需要告诉工厂他需要什么；另一方面，封装变化是最简单的解耦方式，业务逻辑的改变不会需要调用方去改变。&lt;/p&gt;
    
    </summary>
    
      <category term="dotnet" scheme="https://boxweiyang.github.io/categories/dotnet/"/>
    
      <category term="设计模式" scheme="https://boxweiyang.github.io/categories/dotnet/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="dotnet" scheme="https://boxweiyang.github.io/tags/dotnet/"/>
    
      <category term="架构" scheme="https://boxweiyang.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计模式" scheme="https://boxweiyang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>常见设计模式(一)-单例模式</title>
    <link href="https://boxweiyang.github.io/2019/04/24/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://boxweiyang.github.io/2019/04/24/常见设计模式(一)-单例模式/</id>
    <published>2019-04-24T03:16:32.000Z</published>
    <updated>2019-05-09T01:48:20.192Z</updated>
    
    <content type="html"><![CDATA[<p><strong>单例</strong>就是一个类仅存在一个实例对象，那么<strong>单例模式</strong>顾名思义就是实现一个类仅存在一个实例对象这一功能的解决方案。<strong>单例模式</strong>是设计模式中比较简单而又非常常用的，理解其目的能轻松地把握使用它的时机。</p><a id="more"></a><p>##什么时候使用单例模式</p><blockquote><p>单例模式可以解决多种问题，具体使用时机还是要看自己把握。单例模式能够解决的无非就是这么几个问题</p></blockquote><ul><li><p><strong>控制实例的产生数量，达到节约资源提高性能的目的</strong></p><p>通常情况下数据库上下文实例，我们会使用单例模式，在生产过程中，我们必然会不停的对数据产生访问，在频繁的访问过程中，不可避免的会造成多个数据库连接的保持，而使用单例不止可以很好地控制连接数，更可以极大的减少打开或关闭数据库连接所产生的损耗</p></li><li><p><strong>作为通信中间件，因为它是单一实例的，所以可以通过它实现不同线程之间的数据交互操作</strong></p></li><li><p><strong>控制资源的使用，可以很好地控制并发访问</strong></p></li></ul><h2 id="单例模式怎么写"><a href="#单例模式怎么写" class="headerlink" title="单例模式怎么写"></a>单例模式怎么写</h2><blockquote><p>在生产过程中，我们使用对象，通常是 <code>new</code> 一个新的实例。 要实现单例模式，首先就不能允许直接使用 <code>new</code> 来获取实例，不然那没办法达到<strong>类只有一个实例</strong>的目的，而实例化一个对象本质是调用类的构造函数，只要我们私有化构造函数，那么用户就无法使用 <code>new</code> 来获取新的实例，之后只要我们提供一个入口，让用户获取到唯一的实例那就解决了！</p></blockquote><h3 id="简单单例模式"><a href="#简单单例模式" class="headerlink" title="简单单例模式"></a>简单单例模式</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassName</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//一个静态变量来储存实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ClassName myInstance;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//私有化构造函数，达到不能new的目的</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ClassName</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取唯一实例的入口</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassName <span class="title">GetInit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="comment">//如果实例不存在，则建立实例，存在则直接返回实例，实现实例的唯一</span></span><br><span class="line">    <span class="keyword">if</span>(myInstance == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      myInstance = <span class="keyword">new</span> ClassName();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> myInstance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增加多线程限定"><a href="#增加多线程限定" class="headerlink" title="增加多线程限定"></a>增加多线程限定</h3><p>上面的代码已经实现了实例的唯一，但是却有不足之处。在多线程的情况下，极有可能同时运行到<code>GetInit</code>，而根据判断条件，导致类被多次实例化的情况，所以我们需要添加 <span style="color:red"><strong>线程锁</strong></span> 来避免这一情况的发生。那么代码就修改成如下</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassName</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//一个静态变量来储存实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ClassName myInstance;</span><br><span class="line">  <span class="comment">//定义一个线程锁</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> locker = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//私有化构造函数，达到不能new的目的</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ClassName</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取唯一实例的入口</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassName <span class="title">GetInit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="comment">//如果实例不存在，则建立实例，存在则直接返回实例，实现实例的唯一</span></span><br><span class="line">    <span class="keyword">if</span>(myInstance == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//将锁放在这里，如果放在上层判断之前，会造成阻塞影响性能</span></span><br><span class="line">      <span class="comment">//有些明明可以直接返回实例的情况，还要等线程锁相应。</span></span><br><span class="line">      <span class="keyword">lock</span>(locker)&#123;</span><br><span class="line">        <span class="keyword">if</span>(myInstance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          myInstance = <span class="keyword">new</span> ClassName();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> myInstance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就实现了单例模式，在实际开发过程中就可以尽情的使用了。 他的扩展基本上在于如何去写这个入口函数，比如构造数据库资源池，产生多个数据库连接实例却又能很好地控制并发数量减轻服务器压力等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;单例&lt;/strong&gt;就是一个类仅存在一个实例对象，那么&lt;strong&gt;单例模式&lt;/strong&gt;顾名思义就是实现一个类仅存在一个实例对象这一功能的解决方案。&lt;strong&gt;单例模式&lt;/strong&gt;是设计模式中比较简单而又非常常用的，理解其目的能轻松地把握使用它的时机。&lt;/p&gt;
    
    </summary>
    
      <category term="dotnet" scheme="https://boxweiyang.github.io/categories/dotnet/"/>
    
      <category term="设计模式" scheme="https://boxweiyang.github.io/categories/dotnet/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="dotnet" scheme="https://boxweiyang.github.io/tags/dotnet/"/>
    
      <category term="架构" scheme="https://boxweiyang.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计模式" scheme="https://boxweiyang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MacOs常用软件推荐</title>
    <link href="https://boxweiyang.github.io/2019/04/19/MacOs%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <id>https://boxweiyang.github.io/2019/04/19/MacOs常用软件推荐/</id>
    <published>2019-04-19T03:24:46.000Z</published>
    <updated>2019-04-28T05:58:36.575Z</updated>
    
    <content type="html"><![CDATA[<p>记录这段时间使用MacOs过程中用到的比较好用的软件，极大提高工作效率</p><ul><li><p><strong>ShadowsocksX-NG</strong>  好用的翻墙工具，查阅资料下载包文件必备</p></li><li><p><strong>KeyCue</strong> 快捷键提示，显示MAC的所有快捷键及当前应用的快捷键</p></li><li><p><strong>visual studio code</strong> 轻量级代码编辑器，超强的第三方插件功能</p></li><li><p><strong>Balsamiq Mockups3</strong> 手绘风交互原型设计工具</p><a id="more"></a></li><li><p><strong>有道云笔记</strong> 常用文档编写、记录工具</p></li><li><p><strong>Microsoft Remote Desktop</strong> 微软专门为MAC制作的远程桌面连接工具</p></li><li><p><strong>Alfred3</strong> 远超聚焦搜索的搜索工具，还可以做工作流</p></li><li><p><strong>1Password7</strong> 记住你的所有密码，三端通用，方便省事</p></li><li><p><strong>Tower</strong> 最好用的GIT客户端</p></li><li><p><strong>MindNode</strong> 快捷的思维导图工具</p></li><li><p><strong>奇妙清单</strong> 好用的时间管理工具</p></li><li><p><strong>Noizio</strong> 白噪音模拟，模仿风声水声咖啡馆的声音等，帮助你很快的静下心来</p></li><li><p><strong>Bartender3</strong> 状态栏图标隐藏分类工具</p></li><li><p><strong>CleanMyMac X</strong> MAC垃圾清理内存管理大师</p></li><li><p><strong>Navicat Premium</strong> 数据库连接操作工具</p></li><li><p><strong>Visual Studio for Mac 2019</strong> 最新的.net IDE</p></li><li><p><strong>Dr.Unarchiver</strong> 压缩解压工具</p></li><li><p><strong>Transmit</strong> 好用的ftp工具</p></li><li><p><strong>MindMaster</strong> 流程图工具</p></li><li><p><strong>Pikka</strong> 牛逼的屏幕取色工具</p></li><li><p><strong>Typora</strong> 可视化markdown编辑器</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录这段时间使用MacOs过程中用到的比较好用的软件，极大提高工作效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ShadowsocksX-NG&lt;/strong&gt;  好用的翻墙工具，查阅资料下载包文件必备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;KeyCue&lt;/strong&gt; 快捷键提示，显示MAC的所有快捷键及当前应用的快捷键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;visual studio code&lt;/strong&gt; 轻量级代码编辑器，超强的第三方插件功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Balsamiq Mockups3&lt;/strong&gt; 手绘风交互原型设计工具&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="MacOs使用" scheme="https://boxweiyang.github.io/categories/MacOs%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="MacOs" scheme="https://boxweiyang.github.io/tags/MacOs/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门学习</title>
    <link href="https://boxweiyang.github.io/2019/04/16/Docker%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://boxweiyang.github.io/2019/04/16/Docker入门学习/</id>
    <published>2019-04-16T02:06:11.000Z</published>
    <updated>2019-05-09T01:46:17.963Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Docker</strong>是一个轻量级、快速、隔离的容器，提供了镜像的概念，使用者可以从镜像创建容器，镜像包含了运行整个程序的必须环境和程序包本身，可以达到线上和开发环境上的彻底统一。它可以理解成已经安装好必要环境的虚拟机，但是启动速度和资源占用远远要优于虚拟机。</p><a id="more"></a><ul><li><p>入门参考阅读</p><blockquote><p><a href="[https://www.docker-cn.com](https://www.docker-cn.com/">Docker中文官网</a>)</p><p><a href="http://www.docker.org.cn/" target="_blank" rel="noopener">Docker中文社区</a></p><p><a href="[http://www.dockerinfo.net](http://www.dockerinfo.net/">Docker中文文档</a>)</p></blockquote></li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p><strong>Docker</strong> 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker" target="_blank" rel="noopener">GitHub</a> 上进行维护。</p><p>自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。项目的目标是实现轻量级的操作系统虚拟化解决方案。 </p><p>Docker 的基础是 Linux 容器（LXC）等技术。在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p></blockquote><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>镜像是只读的，所有的容器都是基于镜像创建的，基于镜像也可以创建新的镜像。可以简单的理解镜像类似为Windows系统的镜像。一个镜像可以包含产品所需的完整环境，开发人员、测试人员、运维人员使用同一个镜像生成容器，可以保证开发、运维和产品环境的彻底统一，解决多次测试、环境不一致导致开发问题等。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器是基于镜像启动的轻量级的一个部署。容器的启动方式有两种，一种是基于镜像启动，一种是启动已经停止的容器，因为容器实在是太轻量级了，很多开发者都是随时创建和删除容器。</p><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>数据卷是容器之间共享的存储空间，只要有容器仍在使用它就一直存在。 数据卷可以创建也可以直接挂载宿主机器上的文件夹或文件，数据卷上的内容可以直接修改并作用于容器。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>笔者使用 <code>MacOs</code>环境，这里只介绍当前环境下的安装方式，其他方式请参考<a href="https://www.docker-cn.com/get-docker" target="_blank" rel="noopener">官网文档</a></p></blockquote><p><code>Homebrew</code> 是os环境的包管理神器~，我们可以直接通过它完成<strong>Docker</strong>的安装</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>cask <span class="keyword">install </span>docker</span><br></pre></td></tr></table></figure><p>系统可能会提示你输入mac密码已完成整个安装过程，安装结束后状态栏会有一个小鲸鱼图标，然后打开 <code>终端</code> ，输入以下代码段即可发现安装成功</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="comment">--version</span></span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote><p>笔者在本篇博客中仅对<strong>docker</strong>做一个简单的介绍，下一篇博客中会以.netCore webapi为例子介绍它的使用过程。 以下是<strong>docker</strong>的一些常用命令，终端输入 <code>docker --help</code> 即可查看docker的全部命令。</p></blockquote><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker login   <span class="meta"># 登录到一个registry</span></span><br><span class="line">docker search  <span class="meta"># 从registry仓库搜索镜像</span></span><br><span class="line">docker pull    <span class="meta"># 从仓库下载镜像到本地</span></span><br><span class="line">docker <span class="keyword">push</span>    <span class="meta"># 将一个镜像push到registry仓库中</span></span><br><span class="line">docker images  <span class="meta"># 显示本地所有的镜像列表</span></span><br><span class="line">docker import  <span class="meta"># 从一个tar包创建一个镜像，往往和export结合使用</span></span><br><span class="line">docker build   <span class="meta"># 使用Dockerfile创建镜像（推荐）</span></span><br><span class="line">docker commit  <span class="meta"># 从容器创建镜像</span></span><br><span class="line">docker rmi     <span class="meta"># 删除一个镜像</span></span><br><span class="line">docker <span class="keyword">load</span>    <span class="meta"># 从一个tar包创建一个镜像，和save配合使用</span></span><br><span class="line">docker <span class="keyword">save</span>    <span class="meta"># 将一个镜像保存为一个tar包，带layers和tag信息</span></span><br><span class="line">docker history <span class="meta"># 显示生成一个镜像的历史命令</span></span><br><span class="line">docker tag     <span class="meta"># 为镜像起一个别名</span></span><br></pre></td></tr></table></figure><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">create</span> <span class="comment"># 创建一个容器但是不启动它</span></span><br><span class="line">docker run <span class="comment"># 创建并启动一个容器</span></span><br><span class="line">docker <span class="keyword">stop</span> <span class="comment"># 停止容器运行，发送信号SIGTERM</span></span><br><span class="line">docker <span class="keyword">start</span> <span class="comment"># 启动一个停止状态的容器</span></span><br><span class="line">docker restart <span class="comment"># 重启一个容器</span></span><br><span class="line">docker rm <span class="comment"># 删除一个容器</span></span><br><span class="line">docker <span class="keyword">kill</span> <span class="comment"># 发送信号给容器，默认SIGKILL</span></span><br><span class="line">docker attach <span class="comment"># 连接(进入)到一个正在运行的容器</span></span><br><span class="line">docker <span class="keyword">wait</span> <span class="comment"># 阻塞到一个容器，直到容器停止运行</span></span><br><span class="line">docker ps <span class="comment"># 显示状态为运行（Up）的容器</span></span><br><span class="line">docker ps -a <span class="comment"># 显示所有容器,包括运行中（Up）的和退出的(Exited)</span></span><br><span class="line">docker inspect <span class="comment"># 深入容器内部获取容器所有信息</span></span><br><span class="line">docker <span class="keyword">logs</span> <span class="comment"># 查看容器的日志(stdout/stderr)</span></span><br><span class="line">docker <span class="keyword">events</span> <span class="comment"># 得到docker服务器的实时的事件</span></span><br><span class="line">docker port <span class="comment"># 显示容器的端口映射</span></span><br><span class="line">docker top <span class="comment"># 显示容器的进程信息</span></span><br><span class="line">docker diff <span class="comment"># 显示容器文件系统的前后变化</span></span><br><span class="line">docker <span class="keyword">export</span> <span class="comment"># 将容器整个文件系统导出为一个tar包，不带layers、tag等信息</span></span><br></pre></td></tr></table></figure><h3 id="几个常用复杂命令"><a href="#几个常用复杂命令" class="headerlink" title="几个常用复杂命令"></a>几个常用复杂命令</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker rm `docker ps -<span class="keyword">a</span> -q`   <span class="comment"># 删除已经停止的容器</span></span><br><span class="line">docker rmi $(docker images -q) <span class="comment"># 删除所有镜像</span></span><br><span class="line">docker <span class="built_in">kill</span> $(docker ps -q)  <span class="comment"># 杀掉所有正在运行的容器进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除所有none镜像(镜像rebuild之后会产生名字为none的废弃镜像，占用空间)-----------</span></span><br><span class="line">docker ps -<span class="keyword">a</span> | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>|xargs docker <span class="built_in">stop</span>   </span><br><span class="line">docker ps -<span class="keyword">a</span> | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>|xargs docker rm</span><br><span class="line">docker images|grep <span class="literal">none</span>|awk <span class="string">'&#123;print $3 &#125;'</span>|xargs docker rmi</span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile是docker构建镜像的基础，可以理解为一个批处理程序，在构建镜像时使用，按照指定逻辑脚本为你自动构建镜像，学习编写<strong>Dockerfile</strong>是必备的，也可以帮助你理解docker</p><p>在要创建为镜像的宿主文件夹下创建无后缀名的文件 <code>Dockerfile</code> ，打开添加dockerfile脚本即可。</p><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>指定基础镜像，基于何镜像创建此镜像，<strong>必须位于文件的第一条语句</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;image&gt; : &lt;tag&gt;    <span class="comment"># image为镜像名，不指定tag则默认为latest</span></span><br><span class="line"><span class="keyword">FROM</span> scratch<span class="comment"># 这里是基于任何镜像的写法</span></span><br></pre></td></tr></table></figure><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>容器构建时执行指定的shell命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;<span class="comment"># 直接接shell命令</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">"executable"</span>, <span class="string">"param1"</span>, <span class="string">"param2"</span>]</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong>对于多行命令，不建议使用多个RUN，最好卸载一个RUN中，多个RUN会产生多层镜像会增加构建时间</p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>容器启动时执行指定的shell命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;<span class="comment"># 直接接shell命令</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>]</span></span><br></pre></td></tr></table></figure><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>暴露容器监听的接口</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9100</span><span class="comment"># 监听9100接口</span></span><br></pre></td></tr></table></figure><p><strong>容器启动时</strong>使用 <code>-p</code> 映射容器接口道宿主机器，即可通过IP访问</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="selector-tag">p</span> <span class="number">9100</span>:<span class="number">9100</span></span><br></pre></td></tr></table></figure><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>把宿主机文件复制到镜像中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY <span class="tag">&lt;<span class="name">源文件路径</span>&gt;</span> <span class="tag">&lt;<span class="name">镜像中文件路径</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>容器启动时默认的执行命令，<span style="color:red"><strong>和CMD只会执行其中最后的一条，其他的会被覆盖</strong></span></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"dotnet"</span>,<span class="string">"run"</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;是一个轻量级、快速、隔离的容器，提供了镜像的概念，使用者可以从镜像创建容器，镜像包含了运行整个程序的必须环境和程序包本身，可以达到线上和开发环境上的彻底统一。它可以理解成已经安装好必要环境的虚拟机，但是启动速度和资源占用远远要优于虚拟机。&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="https://boxweiyang.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Docker" scheme="https://boxweiyang.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo新建文章自动打开编辑器</title>
    <link href="https://boxweiyang.github.io/2019/04/16/Hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>https://boxweiyang.github.io/2019/04/16/Hexo新建文章自动打开编辑器/</id>
    <published>2019-04-16T01:41:31.000Z</published>
    <updated>2019-05-09T01:46:29.030Z</updated>
    
    <content type="html"><![CDATA[<p>使用Hexo写新文章的时候比较麻烦，首先要使用 <code>hexo new 文章名</code> 来新建md文章，然后去_ports文件夹中找到新建的文章，再使用MD编辑器打开。如果你的文章又有很多那就更不方便了。</p><blockquote><p>Hexo作者提供了一个解决方案，可以在新建文章时自动使用指定编辑器打开。</p></blockquote><a id="more"></a><ul><li><p>在你的Hexo文件夹下找到 <code>scripts</code> 文件夹，如果没有就新建一个</p></li><li><p>在 <code>/scripts</code> 下新建一个js文件，名字可以随意命名</p></li><li><p>js文件中添加以下代码段(Mac)</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Typora打开新创建的MD文件</span></span><br><span class="line"><span class="keyword">var</span> exec = require(<span class="string">'child_process'</span>).exec;</span><br><span class="line">hexo.<span class="keyword">on</span>(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span><span class="comment">&#123; exec('open -a "/Applications/Typora.app" ' + data.path); &#125;</span>);</span></span><br></pre></td></tr></table></figure><p><code>/Applications/Typora.app</code> 这里是你使用的MD编辑器的绝对路径，笔者使用的是Typora编辑器</p></li><li><p>之后只要再次使用命令新建文章，及会同时使用指定的编辑器打开你新建的文章</p></li></ul><p><strong>注：</strong>提供Windows上的代码段以供参考</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  spawn(<span class="string">'start  "D:\WorkPlace\MarkdownPad\MarkdownPad2.exe" '</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Hexo写新文章的时候比较麻烦，首先要使用 &lt;code&gt;hexo new 文章名&lt;/code&gt; 来新建md文章，然后去_ports文件夹中找到新建的文章，再使用MD编辑器打开。如果你的文章又有很多那就更不方便了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hexo作者提供了一个解决方案，可以在新建文章时自动使用指定编辑器打开。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="个人博客搭建" scheme="https://boxweiyang.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://boxweiyang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+NexT搭建个人博客</title>
    <link href="https://boxweiyang.github.io/2019/04/11/%E4%BD%BF%E7%94%A8Hexo-NexT%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://boxweiyang.github.io/2019/04/11/使用Hexo-NexT搭建个人博客/</id>
    <published>2019-04-11T07:04:39.000Z</published>
    <updated>2019-05-09T01:47:29.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Hexo</strong>是一个快速、简洁且高效的博客框架，使用 <code>Markdown</code> 渲染文章，并可快速的通过主题生成静态网页；</p><p><strong>NexT</strong>是一个基于 <code>Hexo</code> 的简洁风主题，配置简单，笔者比较喜欢这种可以清晰呈现自己的博文，又没有过于花哨的渲染的主题；</p></blockquote><p>这篇文章主要记录了我学习使用 <code>Hexo</code> 搭建个人博客的过程，对过程中遇到的问题及关键点做一个归纳。博主的环境为 <code>MacOs</code> ，其他环境仅供参考。</p><a id="more"></a><h2 id="博客构建"><a href="#博客构建" class="headerlink" title="博客构建"></a>博客构建</h2><p>###安装Hexo脚手架</p><p>安装过程非常简单，首先使用 <code>brew</code> 安装必要环境，即可使用 <code>npm</code> 安装Hexo的脚手架。</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>Hexo的安装需要 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>、<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 环境</p><ul><li><p>Node.js安装：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>git</span><br></pre></td></tr></table></figure></li><li><p>Git安装：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="脚手架安装"><a href="#脚手架安装" class="headerlink" title="脚手架安装"></a>脚手架安装</h4><p>必备的环境安装完成之后就可以用 <code>npm</code> 来完成脚手架的安装了</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><hr><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>使用脚手架搭建Hexo项目，会生成一个完整的Hexo项目，首先创建一个项目文件夹，这里使用文件夹 <code>Blog</code>，然后在文件夹中打开终端，执行以下命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p>更多hexo命令，请参考<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">官方文档-命令</a>部分</p><ul><li><p>推荐安装以下插件，包含了自动部署到github等常用操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-heroku <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-rsync <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-openshift <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li></ul><p>待命令执行完成，得到hexo的项目文件，文件夹中介绍几个重要文件</p><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>网站的配置信息，可以在此处配置网站的大部分参数，请参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方文档-配置</a>部分</p><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>存放模板文件，hoxe会根据模板新建不同类型的Markdown文件</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>_posts中存放了你的所有Markdown格式的文章，hoxe会在编译时解析为静态网页</p><h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>存放了主题文件，可以通过 <code>git</code> 命令来下载主题</p><hr><h3 id="下载NexT主题"><a href="#下载NexT主题" class="headerlink" title="下载NexT主题"></a>下载NexT主题</h3><p>在 <code>Blog</code> 文件夹下终端执行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>执行完成后修改配置文件 <code>_config.yml</code> 中的对应配置,以启用主题</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure><hr><h3 id="NexT主题配置"><a href="#NexT主题配置" class="headerlink" title="NexT主题配置"></a>NexT主题配置</h3><p>主题配置请参考<a href="http://theme-next.iissnan.com/getting-started.html#theme-settings" target="_blank" rel="noopener">文档</a>给出了详尽的基础配置、高级配置、第三方插件使用的相关说明，傻瓜式的使用方式~，这里就不多做赘述。其中包括了为博客新增各种功能的页面，如类别展示页和标签展示页，只需要一条命令即可搞定。</p><hr><h3 id="查看自己的博客网站"><a href="#查看自己的博客网站" class="headerlink" title="查看自己的博客网站"></a>查看自己的博客网站</h3><p>执行下面的命令，就可以生成自己的博客网站，并通过本地4000端口预览它。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><h2 id="写博文"><a href="#写博文" class="headerlink" title="写博文"></a>写博文</h2><blockquote><p>跟着上面的步骤做完，并详细的查看了给出的相关官方文档，相信你已经配置出了一个心仪的博客主题，下面就是要写自己的博客的时候了</p></blockquote><h3 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h3><p>新建博文命令会自动根据 <code>scaffolds</code>里面的模板格式创建新的.md文章至source/_posts中</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type"></span>[layout] <span class="string">"postName"</span></span><br></pre></td></tr></table></figure><p>其中，layout是模板名称，不填写则默认为posts模板，下面贴出我设置的post模板内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>自动创建好的文章，会带有以上的头部配置，其中title为标题，date是已设置好的对应格式的当前日期，tags存放标签，categories存放类别。下面是我这篇文章的头部配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">使用Hexo+NexT搭建个人博客</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-04</span><span class="bullet">-11</span> <span class="number">15</span><span class="string">:04:39</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">NexT</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">技术</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">个人博客搭建</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>其中标签可以多个，是同级关系；而类别只能有一个，写多个类别会使这几个类别处于子集关系，如上一篇文章就是属于技术类中的个人博客搭建类别的,标签及类别都不需要特殊配置，在此处设置后，会自动生成对应标签和类别。</p><p>更多用法请参看<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">Hexo官方文档-写作</a></p><hr><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>就是可以看到你新写的文章已经出现了，并且上面配置的类别及标签也自动增加了。</p><hr><h3 id="生成静态网站"><a href="#生成静态网站" class="headerlink" title="生成静态网站"></a>生成静态网站</h3><p>使用下面的命令即可为你生成静态网站到/publish文件夹中，你可以拿来部署到任何一个服务器。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure><blockquote><p>到此为止，我们的个人博客搭建之旅基本已经完成了，剩下的就是美化和丰富它了，下面我会说到使用github搭建部署免费的个人博客网站</p></blockquote><p>​    </p><h2 id="GitHub-Pages与Hexo"><a href="#GitHub-Pages与Hexo" class="headerlink" title="GitHub Pages与Hexo"></a>GitHub Pages与Hexo</h2><p>github pages是github提供的，它可以免费帮你创建一个不限流量的网站。它给你提供了一个免费的域名，如何使用github pages，度娘上一搜一大把，这里就不仔细讲了。我们只说创建好github pages之后如何把hexo博客更快的同步上去。</p><h3 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h3><p>首先要修改 <code>_config.yml</code>配置文件，添加或修改如下内容</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">type:</span> git</span><br><span class="line"><span class="symbol">repository:</span> (这里放git地址)</span><br><span class="line"><span class="symbol">branch:</span> master</span><br></pre></td></tr></table></figure><p>然后只要执行以下操作，就可以直接生成静态网站并发布到github上</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo deploy</span></span><br></pre></td></tr></table></figure><p>以上操作默认提交已产生的静态页面，如果你需要重新构建静态页面再提交</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span> -d</span><br></pre></td></tr></table></figure><p>首次执行会需要你输入github的账号密码以获取提交权限。</p><h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h2><ul><li><p><a href="https://blog.csdn.net/weixin_39345384/article/details/80787998" target="_blank" rel="noopener">NexT主题下使用Leancloud统计文章阅读量</a></p></li><li><p><a href="http://theme-next.iissnan.com/faqs.html#optimize" target="_blank" rel="noopener">NexT主题常见问题解答</a></p></li><li><p><a href="/Users/tttt/Documents/persional/Blog/source/_posts/使用Hexo-NexT搭建个人博客.md">添加字数统计和阅读时长</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hexo&lt;/strong&gt;是一个快速、简洁且高效的博客框架，使用 &lt;code&gt;Markdown&lt;/code&gt; 渲染文章，并可快速的通过主题生成静态网页；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NexT&lt;/strong&gt;是一个基于 &lt;code&gt;Hexo&lt;/code&gt; 的简洁风主题，配置简单，笔者比较喜欢这种可以清晰呈现自己的博文，又没有过于花哨的渲染的主题；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章主要记录了我学习使用 &lt;code&gt;Hexo&lt;/code&gt; 搭建个人博客的过程，对过程中遇到的问题及关键点做一个归纳。博主的环境为 &lt;code&gt;MacOs&lt;/code&gt; ，其他环境仅供参考。&lt;/p&gt;
    
    </summary>
    
      <category term="个人博客搭建" scheme="https://boxweiyang.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://boxweiyang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法总结</title>
    <link href="https://boxweiyang.github.io/2019/04/11/Markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://boxweiyang.github.io/2019/04/11/Markdown语法总结/</id>
    <published>2019-04-11T06:27:49.000Z</published>
    <updated>2019-05-09T01:47:35.030Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近对<strong>Markdown</strong>产生了兴许，将整个学习过程进行了整理。此部分为Markdown的基础用法，这东西用着有点舒服，它的语法一篇文章足可以说完，老少皆宜的文字编辑方式！！</p></blockquote><a id="more"></a><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p><strong>目录</strong>在文章任何部位使用一下代码段，即可根据标题等级生成目录。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure><hr><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><strong>Markdown</strong>使用<span style="color:red"> <code>#</code></span> 来设置标题。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">##### h5</span><br><span class="line">###### h6</span><br></pre></td></tr></table></figure><p><img src="http://note.youdao.com/yws/res/7572/FCB30671F6794E459C01E5771047C8F9" alt="image"></p><hr><h3 id="区块段落"><a href="#区块段落" class="headerlink" title="区块段落"></a>区块段落</h3><blockquote><p>区块段落可以用来高亮显示置顶段落文字</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 这是一个区块段落</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">    </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 这样可以换到下一段</span></span><br></pre></td></tr></table></figure><blockquote><p>这是一个区块段落</p><p>这样可以换到下一段</p></blockquote><html><br><!--在这里插入内容--><br></html><html><br><!--在这里插入内容--><br></html><hr><h3 id="图文链接"><a href="#图文链接" class="headerlink" title="图文链接"></a>图文链接</h3><ul><li><strong>文字链接</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">点击跳转至百度</span>](<span class="link">http://www.baidu.com</span>)</span><br></pre></td></tr></table></figure><p><a href="http://www.baidu.com" target="_blank" rel="noopener">点击跳转至百度</a></p><ul><li><strong>嵌入线上图片</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">这里是图片说明</span>](<span class="link">https://uploadimages.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg？imageMogr2/autoorient/strip%7CimageView2/2/w/1240</span>)</span><br></pre></td></tr></table></figure><blockquote><p>另外，针对插入的本地图片可以控制图片大小，在拖拽、拷贝或者点击插入本地图片之后，直接在图片名称后面（无需空格）添加以下语法均可以按照以下要求控制图片大小</p><ul><li>@w=300</li><li>@h=150</li><li>@w=200h=100</li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里是图片说明"></p><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>Markdown</strong>列表分为无序列表及有序列表</p><ul><li><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4></li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>1</span><br><span class="line"><span class="bullet">* </span>2</span><br><span class="line"><span class="bullet">* </span>3</span><br></pre></td></tr></table></figure><ul><li>1</li><li>2</li><li><p>3</p></li><li><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>A</span><br><span class="line"><span class="bullet">2. </span>B</span><br><span class="line"><span class="bullet">3. </span>C</span><br></pre></td></tr></table></figure><ol><li>A</li><li>B</li><li>C</li></ol><hr><h3 id="段落缩进（一个tab）"><a href="#段落缩进（一个tab）" class="headerlink" title="段落缩进（一个tab）"></a>段落缩进（一个tab）</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 段落<span class="number">1</span></span><br><span class="line">    &gt; 区块<span class="number">1</span></span><br><span class="line"></span><br><span class="line">* 段落<span class="number">2</span></span><br><span class="line">    &gt; 区块<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><p>段落1</p><blockquote><p>区块1</p></blockquote></li><li><p>段落2</p><blockquote><p>区块2</p></blockquote></li></ul><hr><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br></pre></td></tr></table></figure><hr><h3 id="字形标记"><a href="#字形标记" class="headerlink" title="字形标记"></a>字形标记</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">*斜体*</span></span><br><span class="line"></span><br><span class="line">~~划线~~</span><br><span class="line"></span><br><span class="line">*<span class="strong">*粗体*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p><em>斜体</em></p><p><del>划线</del></p><p><strong>粗体</strong></p><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>第二行代码</strong>中，<br><span style="color:red"><code>:---:</code></span> 表示居中，<br><span style="color:red"><code>---:</code></span> 表示居右，<br><span style="color:red"><code>:---</code></span> 表示居左</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">条目<span class="number">1</span><span class="params">|条目2|</span>条目<span class="number">3</span></span><br><span class="line"><span class="symbol">:---</span><span class="symbol">:|</span><span class="symbol">:---|---</span><span class="symbol">:</span></span><br><span class="line">内容<span class="number">1</span><span class="params">|内容2|</span>内容<span class="number">3</span></span><br><span class="line">居中的内容<span class="params">|居左的内容|</span>居右的内容</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">条目1</th><th style="text-align:left">条目2</th><th style="text-align:right">条目3</th></tr></thead><tbody><tr><td style="text-align:center">内容1</td><td style="text-align:left">内容2</td><td style="text-align:right">内容3</td></tr><tr><td style="text-align:center">居中的内容</td><td style="text-align:left">居左的内容</td><td style="text-align:right">居右的内容</td></tr></tbody></table><hr><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><p><strong>代码段</strong>使用 <code>反引号</code> 标记，嵌入行内的代码段使用单个反引号标记，整段的代码段使用三个反引号标记。</p><p><strong>注1：</strong> 反引号即键盘上的 <span style="color:red"><code>~</code></span> 号<br><strong>注2：</strong> 代码高亮取决于对应Markdown编辑器的支持</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">11</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="选中"><a href="#选中" class="headerlink" title="选中"></a>选中</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="string">[ ]</span> 未选中</span><br><span class="line">* <span class="string">[x]</span> 已选中</span><br></pre></td></tr></table></figure><ul><li>[ ] 未选中</li><li>[x] 已选中</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近对&lt;strong&gt;Markdown&lt;/strong&gt;产生了兴许，将整个学习过程进行了整理。此部分为Markdown的基础用法，这东西用着有点舒服，它的语法一篇文章足可以说完，老少皆宜的文字编辑方式！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="个人博客搭建" scheme="https://boxweiyang.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Markdown" scheme="https://boxweiyang.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
